name: Build & (Tag) Release macOS App # שם זרימת העבודה

on:
  push:
    branches:
      - main           # ירוץ על כל push לענף הראשי (main)
    tags:
      - 'v*.*.*'       # בנוסף, ירוץ (ויפרסם) על push של תגיות כמו v1.2.3

permissions:
  contents: write      # הרשאות כתיבה לתוכן הריפוזיטורי (לצורך יצירת ריליס)
  packages: write      # הרשאות כתיבה לחבילות (לצורך העלאת ארטיפקטים)

jobs:
  build-mac:
    runs-on: macos-latest # זרימת העבודה תרוץ על מכונה וירטואלית של macOS

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # שלב: משיכת קוד הריפוזיטורי

      - name: Setup Node.js
        uses: actions/setup-node@v3 # שלב: הגדרת סביבת Node.js
        with:
          node-version: 20 # שימוש בגרסה 20 של Node.js

      - name: Install dependencies
        run: npm ci # שלב: התקנת תלויות הפרויקט

      - name: Build (do not publish directly)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # שימוש בטוקן ה-GitHub (למקרה ש-electron-builder יצטרך אותו פנימית)
        run: |
          # שלב: בניית האפליקציה.
          # הפקודה '--publish never' מבטיחה ש-electron-builder יבנה את הקבצים
          # אך לא ינסה לפרסם אותם ישירות ל-GitHub Release.
          # הקבצים (DMG ו-ZIP) יישארו בתיקיית dist/ לצורך העלאה בשלבים הבאים.
          npm run build -- --publish never

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4 # שלב: העלאת קובץ ה-DMG כארטיפקט של זרימת העבודה
        with:
          name: GeminiDesk-mac-dmg # שם הארטיפקט
          path: dist/*.dmg # נתיב הקבצים להעלאה

      - name: Create GitHub Release
        id: cr # מזהה ייחודי לשלב זה, כדי שנוכל להתייחס לפלטים שלו
        uses: actions/create-release@v1 # שלב: יצירת ריליס חדש ב-GitHub
        # שלב זה ירוץ רק כאשר ה-push הוא של תגית (לדוגמה: v1.0.0)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }} # שם התגית ישמש כשם הריליס
          release_name: Release ${{ github.ref_name }} # שם הריליס שיוצג
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # שימוש בטוקן ה-GitHub ליצירת הריליס

      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1 # שלב: העלאת קובץ ה-ZIP כנכס לריליס
        # שלב זה ירוץ רק כאשר ה-push הוא של תגית
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          upload_url: ${{ steps.cr.outputs.upload_url }} # כתובת ה-URL להעלאה מהשלב הקודם
          asset_path: dist/*.zip # נתיב קובץ ה-ZIP להעלאה
          asset_name: GeminiApp-${{ github.ref_name }}.zip # שם הנכס שיוצג בריליס
          asset_content_type: application/zip # סוג התוכן של הנכס
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # שימוש בטוקן ה-GitHub להעלאת הנכס
